Image
==================

.. exec::
    import subprocess as sp
    import json
    ret = sp.check_output('curl -sq -XPOST -c cookies.txt -d "username=admin&password=${QPASSWORD}" http://${QIP}:${QPORT}/api/v1/login', shell=True)
    try:
        auth = json.loads(ret)
        if 'error' in auth:
            raise Exception
    except:
        raise Exception('Unauthorized: ' + str(ret))

.. contents::

Images would be from the depots, including

* local: images had been downloaded in local disk
* qnap: images selected by QNAP, which needs to be download before using
* dockerhub: images located in Docker Hub, which needs to be downloaded before using

Search
-----------------

.. http:get:: /api/v1/image/

    Get image list from specific depots.
    If depots is from dockerhub, it will take a few seconds to search.
    Filter installed image function only effect for depots from qnap.

    :param category: (optional) one of ``local``, ``qnap``, ``official``, ``dockerhub``, ``private``. **Default: local**
    :param filter_text: (optional) filter image name and description or query string for docker search
    :param type: (optional) one of ``lxc``, ``docker``
    :param registry_name: (optional) Private registry name 
    
    From local repository:

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt "http://${QIP}:${QPORT}/api/v1/image/?category=local"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            "http://${QIP}:${QPORT}/api/v1/image/?category=local"
            | python -m json.tool


    From QNAP selected:

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt "http://${QIP}:${QPORT}/api/v1/image/?category=qnap"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            "http://${QIP}:${QPORT}/api/v1/image/?category=qnap"
            | python -m json.tool
    
    
    From Docker Hub repository:

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt "http://${QIP}:${QPORT}/api/v1/image/?category=official"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            "http://${QIP}:${QPORT}/api/v1/image/?category=official"
            | python -m json.tool


    From Docker Hub search:

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt \
              "http://${QIP}:${QPORT}/api/v1/image/?category=dockerhub&filter_text=dorowu"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            "http://${QIP}:${QPORT}/api/v1/image/?category=dockerhub&filter_text=dorowu"
            | python -m json.tool


Inspect & tags
-----------------


.. http:get:: /api/v1/image/(string:image_type)/(string:image_name)/(string:image_tag)/inspect

    Inspect image information.

    :param image_type: ``docker``
    :param image_name: image name
    :param image_name: image tag, which is ``latest`` or other version number

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt \
            "http://${QIP}:${QPORT}/api/v1/image/docker/ubuntu/latest/inspect"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt 
            "http://${QIP}:${QPORT}/api/v1/image/docker/ubuntu/latest/inspect" | python -m json.tool


.. http:get:: /api/v1/image/(string:image_type)/(string:image_name)/(string:image_tag)/remote_inspect

    Inspect image information.

    :param image_type: ``docker``
    :param image_name: image name
    :param image_name: image tag, which is ``latest`` or other version number

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt \
            "http://${QIP}:${QPORT}/api/v1/image/docker/redis/latest/remote_inspect"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt 
            "http://${QIP}:${QPORT}/api/v1/image/docker/redis/latest/remote_inspect" | python -m json.tool


.. http:get:: /api/v1/image/(string:image_name)/tags

    Get image tags from specific registry. 
    
    :param image_name: image name
    :query registry: Registry name

    :resjson string name: Request image name 
    :resjson array installed: tags have been installed in local
    :resjson array tags: all tags of request image

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt \
            "http://${QIP}:${QPORT}/api/v1/image/nginx/tags?registry=Docker%20Hub"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt 
            "http://${QIP}:${QPORT}/api/v1/image/nginx/tags?registry=Docker%20Hub" | python -m json.tool


Download
-----------------


.. http:post:: /api/v1/image/(string:repository)/(string:image_type)/(string:image_name)/(string:image_tag)/download

    Download the image from QNAP or Docker Hub

    :param repository: ``dockerhub``, ``qnap``
    :param image_type: ``lxc``, ``docker``
    :param image_name: image name
    :param image_tag: image tag, which is ``latest`` or other version number

    :reqjson string description: description of this image
    :reqjson string location: url of this image
    :reqjson string icon: icon source of this image

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '{
                "description": "I am description.", 
                "location": "https://registry.hub.docker.com/u/lgsd/diamond/",
                "icon": "http://download.qnap.com/QPKG/images/QPKG/container_icon.png"
            }' "http://${QIP}:${QPORT}/api/v1/image/dockerhub/docker/lgsd/diamond/latest/download"

    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt 
            -d '{"description": "I am description.", "location": "https://registry.hub.docker.com/u/lgsd/diamond/",
                "icon": "http://download.qnap.com/QPKG/images/QPKG/container_icon.png" }'
            "http://${QIP}:${QPORT}/api/v1/image/dockerhub/docker/lgsd/diamond/latest/download" | python -m json.tool


.. http:get:: /api/v1/image/downloadstatus

    Get all downloading image status.

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -b cookies.txt -XGET "http://${QIP}:${QPORT}/api/v1/image/downloadstatus"
 

    **Example response**

    .. runcode:: json

        curl -sq -b cookies.txt -XGET "http://${QIP}:${QPORT}/api/v1/image/downloadstatus" | python -m json.tool


.. http:delete:: /api/v1/image/(string:repository)/(string:image_type)/(string:image_name)

    Remove image function which is only used in ``local`` image.
    This request will take few seconds to finish. 

    :param repository: ``local`` 
    :param image_type: ``lxc``, ``docker``
    :param image_name: image name

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -b cookies.txt -XDELETE "http://${QIP}:${QPORT}/api/v1/image/local/docker/lgsd/diamond"

    **Example response**

    .. runcode:: json

        curl -sq -b cookies.txt -XDELETE 
            "http://${QIP}:${QPORT}/api/v1/image/local/docker/lgsd/diamond" | python -m json.tool



Registry
-----------------

.. http:get:: /api/v1/registry

    Registry ``Docker Hub`` is default registry in container-station.

    :resjson string name: Registry name
    :resjson string url: Registry URL
    :resjson boolean enable_trust_cert: Trust SSL self-signed certificate
    :resjson string username: Registry username
    :resjson string password: Registry password
    :resjson string version: Registry version
    
    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt http://${QIP}:${QPORT}/api/v1/registry

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            http://${QIP}:${QPORT}/api/v1/registry
            | python -m json.tool;


.. http:get:: /api/v1/registry/ping

    :param url: Registry URL
    :param tls: Enable self-cert or not

    :resjson string version: Registry version
    
    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XGET -b cookies.txt \
            "http://${QIP}:${QPORT}/api/v1/registry/ping?url=https://registry.hub.docker.com&tls=true"

    **Example response**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            "http://${QIP}:${QPORT}/api/v1/registry/ping?url=https://registry.hub.docker.com&tls=true"
            | python -m json.tool;


    **Example response when error occurred**

    .. runcode:: json

        curl -sq -XGET -b cookies.txt
            "http://${QIP}:${QPORT}/api/v1/registry/ping?url=https://test.hub.docker.com&tls=true"
            | python -m json.tool;


.. http:post:: /api/v1/registry

    * Registry name cannot conflict with others.
    * Edit default ``Docker Hub`` registry is forbidden.

    :reqjson string method: Request method of registry. It should be ``add`` or ``edit``. **[required]**
    :reqjson string name: Registry name **[required]**
    :reqjson string url: Registry URL **[required]**
    :reqjson boolean enable_trust_cert: Trust SSL self-signed certificate **[required]**
    :reqjson string version: Registry version **[required]**
    :reqjson string username: Registry username
    :reqjson string password: Registry password
    :reqjson string oldname: Original registry name before edit.

    Add a new registry:
    
    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '{
                "method": "add",
                "name": "test",
                "enable_trust_cert": true,
                "version": "v1",
                "url": "https://test.registry.com",
                "username": "my_user",
                "password": "my_pass"
            }' http://${QIP}:${QPORT}/api/v1/registry


    **Example response**

    .. runcode:: json

        curl -sq -XDELETE -b cookies.txt http://${QIP}:${QPORT}/api/v1/registry/test -o /dev/null;
        curl -sq -XDELETE -b cookies.txt http://${QIP}:${QPORT}/api/v1/registry/new_test -o /dev/null;
        curl -sq -XPOST -b cookies.txt -d
            '{
                "method": "add",
                "name": "test",
                "enable_trust_cert": true,
                "version": "v1",
                "url": "https://test.registry.com",
                "username": "my_user",
                "password": "my_pass"
            }'
            http://${QIP}:${QPORT}/api/v1/registry
            | python -m json.tool;

    Edit registry:
    
    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XPOST -b cookies.txt -d \
            '{
                "method": "edit",
                "oldname": "test",
                "name": "new_test",
                "enable_trust_cert": false,
                "url": "https://new_test.registry.com",
                "username": "my_new_user",
                "password": "my_new_pass"
            }' http://${QIP}:${QPORT}/api/v1/registry


    **Example response**

    .. runcode:: json

        curl -sq -XPOST -b cookies.txt -d
            '{
                "method": "edit",
                "oldname": "test",
                "name": "new_test",
                "enable_trust_cert": false,
                "url": "https://new_test.registry.com",
                "username": "my_new_user",
                "password": "my_new_pass"
            }'
            http://${QIP}:${QPORT}/api/v1/registry
            | python -m json.tool;


.. http:delete:: /api/v1/registry

    Delete default ``Docker Hub`` registry is forbidden.

    **Example request**

    .. sourcecode:: bash

        $ curl -sq -XDELETE -b cookies.txt http://${QIP}:${QPORT}/api/v1/registry/new_test

    **Example response**

    .. runcode:: json

        curl -sq -XDELETE -b cookies.txt
            http://${QIP}:${QPORT}/api/v1/registry/new_test
            | python -m json.tool;
